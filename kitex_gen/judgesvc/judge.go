// Code generated by thriftgo (0.3.13). DO NOT EDIT.

package judgesvc

import (
	"bytes"
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"strings"

	"github.com/apache/thrift/lib/go/thrift"
)

type Language int64

const (
	Language_CPP     Language = 0
	Language_C       Language = 1
	Language_Python3 Language = 2
	Language_Java    Language = 3
	Language_Go      Language = 4
)

func (p Language) String() string {
	switch p {
	case Language_CPP:
		return "CPP"
	case Language_C:
		return "C"
	case Language_Python3:
		return "Python3"
	case Language_Java:
		return "Java"
	case Language_Go:
		return "Go"
	}
	return "<UNSET>"
}

func LanguageFromString(s string) (Language, error) {
	switch s {
	case "CPP":
		return Language_CPP, nil
	case "C":
		return Language_C, nil
	case "Python3":
		return Language_Python3, nil
	case "Java":
		return Language_Java, nil
	case "Go":
		return Language_Go, nil
	}
	return Language(0), fmt.Errorf("not a valid Language string")
}

func LanguagePtr(v Language) *Language { return &v }
func (p *Language) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = Language(result.Int64)
	return
}

func (p *Language) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type JudgeStatus int64

const (
	JudgeStatus_Accepted            JudgeStatus = 0
	JudgeStatus_Finished            JudgeStatus = 1
	JudgeStatus_Running             JudgeStatus = 2
	JudgeStatus_CompileError        JudgeStatus = 3
	JudgeStatus_RuntimeError        JudgeStatus = 4
	JudgeStatus_WrongAnswer         JudgeStatus = 5
	JudgeStatus_TimeLimitExceeded   JudgeStatus = 6
	JudgeStatus_MemoryLimitExceeded JudgeStatus = 7
	JudgeStatus_OutputLimitExceeded JudgeStatus = 8
)

func (p JudgeStatus) String() string {
	switch p {
	case JudgeStatus_Accepted:
		return "Accepted"
	case JudgeStatus_Finished:
		return "Finished"
	case JudgeStatus_Running:
		return "Running"
	case JudgeStatus_CompileError:
		return "CompileError"
	case JudgeStatus_RuntimeError:
		return "RuntimeError"
	case JudgeStatus_WrongAnswer:
		return "WrongAnswer"
	case JudgeStatus_TimeLimitExceeded:
		return "TimeLimitExceeded"
	case JudgeStatus_MemoryLimitExceeded:
		return "MemoryLimitExceeded"
	case JudgeStatus_OutputLimitExceeded:
		return "OutputLimitExceeded"
	}
	return "<UNSET>"
}

func JudgeStatusFromString(s string) (JudgeStatus, error) {
	switch s {
	case "Accepted":
		return JudgeStatus_Accepted, nil
	case "Finished":
		return JudgeStatus_Finished, nil
	case "Running":
		return JudgeStatus_Running, nil
	case "CompileError":
		return JudgeStatus_CompileError, nil
	case "RuntimeError":
		return JudgeStatus_RuntimeError, nil
	case "WrongAnswer":
		return JudgeStatus_WrongAnswer, nil
	case "TimeLimitExceeded":
		return JudgeStatus_TimeLimitExceeded, nil
	case "MemoryLimitExceeded":
		return JudgeStatus_MemoryLimitExceeded, nil
	case "OutputLimitExceeded":
		return JudgeStatus_OutputLimitExceeded, nil
	}
	return JudgeStatus(0), fmt.Errorf("not a valid JudgeStatus string")
}

func JudgeStatusPtr(v JudgeStatus) *JudgeStatus { return &v }
func (p *JudgeStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = JudgeStatus(result.Int64)
	return
}

func (p *JudgeStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type JudgeLimit struct {
	MaxCPUTime           int32 `thrift:"maxCPUTime,1" frugal:"1,default,i32" json:"maxCPUTime"`
	MaxRealTime          int32 `thrift:"maxRealTime,2" frugal:"2,default,i32" json:"maxRealTime"`
	MaxMemory            int64 `thrift:"maxMemory,3" frugal:"3,default,i64" json:"maxMemory"`
	MaxStack             int64 `thrift:"maxStack,4" frugal:"4,default,i64" json:"maxStack"`
	MaxProcessNumber     int32 `thrift:"maxProcessNumber,5" frugal:"5,default,i32" json:"maxProcessNumber"`
	MaxOutputSize        int64 `thrift:"maxOutputSize,6" frugal:"6,default,i64" json:"maxOutputSize"`
	MemoryLimitCheckOnly int32 `thrift:"memoryLimitCheckOnly,7" frugal:"7,default,i32" json:"memoryLimitCheckOnly"`
}

func NewJudgeLimit() *JudgeLimit {
	return &JudgeLimit{}
}

func (p *JudgeLimit) InitDefault() {
}

func (p *JudgeLimit) GetMaxCPUTime() (v int32) {
	return p.MaxCPUTime
}

func (p *JudgeLimit) GetMaxRealTime() (v int32) {
	return p.MaxRealTime
}

func (p *JudgeLimit) GetMaxMemory() (v int64) {
	return p.MaxMemory
}

func (p *JudgeLimit) GetMaxStack() (v int64) {
	return p.MaxStack
}

func (p *JudgeLimit) GetMaxProcessNumber() (v int32) {
	return p.MaxProcessNumber
}

func (p *JudgeLimit) GetMaxOutputSize() (v int64) {
	return p.MaxOutputSize
}

func (p *JudgeLimit) GetMemoryLimitCheckOnly() (v int32) {
	return p.MemoryLimitCheckOnly
}
func (p *JudgeLimit) SetMaxCPUTime(val int32) {
	p.MaxCPUTime = val
}
func (p *JudgeLimit) SetMaxRealTime(val int32) {
	p.MaxRealTime = val
}
func (p *JudgeLimit) SetMaxMemory(val int64) {
	p.MaxMemory = val
}
func (p *JudgeLimit) SetMaxStack(val int64) {
	p.MaxStack = val
}
func (p *JudgeLimit) SetMaxProcessNumber(val int32) {
	p.MaxProcessNumber = val
}
func (p *JudgeLimit) SetMaxOutputSize(val int64) {
	p.MaxOutputSize = val
}
func (p *JudgeLimit) SetMemoryLimitCheckOnly(val int32) {
	p.MemoryLimitCheckOnly = val
}

var fieldIDToName_JudgeLimit = map[int16]string{
	1: "maxCPUTime",
	2: "maxRealTime",
	3: "maxMemory",
	4: "maxStack",
	5: "maxProcessNumber",
	6: "maxOutputSize",
	7: "memoryLimitCheckOnly",
}

func (p *JudgeLimit) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_JudgeLimit[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *JudgeLimit) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MaxCPUTime = _field
	return nil
}
func (p *JudgeLimit) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MaxRealTime = _field
	return nil
}
func (p *JudgeLimit) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MaxMemory = _field
	return nil
}
func (p *JudgeLimit) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MaxStack = _field
	return nil
}
func (p *JudgeLimit) ReadField5(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MaxProcessNumber = _field
	return nil
}
func (p *JudgeLimit) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MaxOutputSize = _field
	return nil
}
func (p *JudgeLimit) ReadField7(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemoryLimitCheckOnly = _field
	return nil
}

func (p *JudgeLimit) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("JudgeLimit"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *JudgeLimit) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("maxCPUTime", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.MaxCPUTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *JudgeLimit) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("maxRealTime", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.MaxRealTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *JudgeLimit) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("maxMemory", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MaxMemory); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *JudgeLimit) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("maxStack", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MaxStack); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *JudgeLimit) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("maxProcessNumber", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.MaxProcessNumber); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *JudgeLimit) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("maxOutputSize", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MaxOutputSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *JudgeLimit) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("memoryLimitCheckOnly", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.MemoryLimitCheckOnly); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *JudgeLimit) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JudgeLimit(%+v)", *p)

}

func (p *JudgeLimit) DeepEqual(ano *JudgeLimit) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MaxCPUTime) {
		return false
	}
	if !p.Field2DeepEqual(ano.MaxRealTime) {
		return false
	}
	if !p.Field3DeepEqual(ano.MaxMemory) {
		return false
	}
	if !p.Field4DeepEqual(ano.MaxStack) {
		return false
	}
	if !p.Field5DeepEqual(ano.MaxProcessNumber) {
		return false
	}
	if !p.Field6DeepEqual(ano.MaxOutputSize) {
		return false
	}
	if !p.Field7DeepEqual(ano.MemoryLimitCheckOnly) {
		return false
	}
	return true
}

func (p *JudgeLimit) Field1DeepEqual(src int32) bool {

	if p.MaxCPUTime != src {
		return false
	}
	return true
}
func (p *JudgeLimit) Field2DeepEqual(src int32) bool {

	if p.MaxRealTime != src {
		return false
	}
	return true
}
func (p *JudgeLimit) Field3DeepEqual(src int64) bool {

	if p.MaxMemory != src {
		return false
	}
	return true
}
func (p *JudgeLimit) Field4DeepEqual(src int64) bool {

	if p.MaxStack != src {
		return false
	}
	return true
}
func (p *JudgeLimit) Field5DeepEqual(src int32) bool {

	if p.MaxProcessNumber != src {
		return false
	}
	return true
}
func (p *JudgeLimit) Field6DeepEqual(src int64) bool {

	if p.MaxOutputSize != src {
		return false
	}
	return true
}
func (p *JudgeLimit) Field7DeepEqual(src int32) bool {

	if p.MemoryLimitCheckOnly != src {
		return false
	}
	return true
}

type JudgeRequest struct {
	Code       []byte      `thrift:"code,1,optional" frugal:"1,optional,binary" json:"code,omitempty"`
	CodeFileId *string     `thrift:"codeFileId,2,optional" frugal:"2,optional,string" json:"codeFileId,omitempty"`
	Input      []byte      `thrift:"input,3,required" frugal:"3,required,binary" json:"input"`
	Language   Language    `thrift:"language,4,required" frugal:"4,required,Language" json:"language"`
	Limit      *JudgeLimit `thrift:"limit,5,optional" frugal:"5,optional,JudgeLimit" json:"limit,omitempty"`
}

func NewJudgeRequest() *JudgeRequest {
	return &JudgeRequest{}
}

func (p *JudgeRequest) InitDefault() {
}

var JudgeRequest_Code_DEFAULT []byte

func (p *JudgeRequest) GetCode() (v []byte) {
	if !p.IsSetCode() {
		return JudgeRequest_Code_DEFAULT
	}
	return p.Code
}

var JudgeRequest_CodeFileId_DEFAULT string

func (p *JudgeRequest) GetCodeFileId() (v string) {
	if !p.IsSetCodeFileId() {
		return JudgeRequest_CodeFileId_DEFAULT
	}
	return *p.CodeFileId
}

func (p *JudgeRequest) GetInput() (v []byte) {
	return p.Input
}

func (p *JudgeRequest) GetLanguage() (v Language) {
	return p.Language
}

var JudgeRequest_Limit_DEFAULT *JudgeLimit

func (p *JudgeRequest) GetLimit() (v *JudgeLimit) {
	if !p.IsSetLimit() {
		return JudgeRequest_Limit_DEFAULT
	}
	return p.Limit
}
func (p *JudgeRequest) SetCode(val []byte) {
	p.Code = val
}
func (p *JudgeRequest) SetCodeFileId(val *string) {
	p.CodeFileId = val
}
func (p *JudgeRequest) SetInput(val []byte) {
	p.Input = val
}
func (p *JudgeRequest) SetLanguage(val Language) {
	p.Language = val
}
func (p *JudgeRequest) SetLimit(val *JudgeLimit) {
	p.Limit = val
}

var fieldIDToName_JudgeRequest = map[int16]string{
	1: "code",
	2: "codeFileId",
	3: "input",
	4: "language",
	5: "limit",
}

func (p *JudgeRequest) IsSetCode() bool {
	return p.Code != nil
}

func (p *JudgeRequest) IsSetCodeFileId() bool {
	return p.CodeFileId != nil
}

func (p *JudgeRequest) IsSetLimit() bool {
	return p.Limit != nil
}

func (p *JudgeRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetInput bool = false
	var issetLanguage bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetInput = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetLanguage = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetInput {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetLanguage {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_JudgeRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_JudgeRequest[fieldId]))
}

func (p *JudgeRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Code = _field
	return nil
}
func (p *JudgeRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CodeFileId = _field
	return nil
}
func (p *JudgeRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Input = _field
	return nil
}
func (p *JudgeRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field Language
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = Language(v)
	}
	p.Language = _field
	return nil
}
func (p *JudgeRequest) ReadField5(iprot thrift.TProtocol) error {
	_field := NewJudgeLimit()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Limit = _field
	return nil
}

func (p *JudgeRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("JudgeRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *JudgeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBinary([]byte(p.Code)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *JudgeRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCodeFileId() {
		if err = oprot.WriteFieldBegin("codeFileId", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CodeFileId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *JudgeRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("input", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Input)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *JudgeRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("language", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Language)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *JudgeRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err = oprot.WriteFieldBegin("limit", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Limit.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *JudgeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JudgeRequest(%+v)", *p)

}

func (p *JudgeRequest) DeepEqual(ano *JudgeRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.CodeFileId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Input) {
		return false
	}
	if !p.Field4DeepEqual(ano.Language) {
		return false
	}
	if !p.Field5DeepEqual(ano.Limit) {
		return false
	}
	return true
}

func (p *JudgeRequest) Field1DeepEqual(src []byte) bool {

	if bytes.Compare(p.Code, src) != 0 {
		return false
	}
	return true
}
func (p *JudgeRequest) Field2DeepEqual(src *string) bool {

	if p.CodeFileId == src {
		return true
	} else if p.CodeFileId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CodeFileId, *src) != 0 {
		return false
	}
	return true
}
func (p *JudgeRequest) Field3DeepEqual(src []byte) bool {

	if bytes.Compare(p.Input, src) != 0 {
		return false
	}
	return true
}
func (p *JudgeRequest) Field4DeepEqual(src Language) bool {

	if p.Language != src {
		return false
	}
	return true
}
func (p *JudgeRequest) Field5DeepEqual(src *JudgeLimit) bool {

	if !p.Limit.DeepEqual(src) {
		return false
	}
	return true
}

type JudgeResponse struct {
	Time   int64       `thrift:"time,1" frugal:"1,default,i64" json:"time"`
	Memory int64       `thrift:"memory,2" frugal:"2,default,i64" json:"memory"`
	Status JudgeStatus `thrift:"status,3" frugal:"3,default,JudgeStatus" json:"status"`
	Output string      `thrift:"output,4" frugal:"4,default,string" json:"output"`
	Error  string      `thrift:"error,5" frugal:"5,default,string" json:"error"`
}

func NewJudgeResponse() *JudgeResponse {
	return &JudgeResponse{}
}

func (p *JudgeResponse) InitDefault() {
}

func (p *JudgeResponse) GetTime() (v int64) {
	return p.Time
}

func (p *JudgeResponse) GetMemory() (v int64) {
	return p.Memory
}

func (p *JudgeResponse) GetStatus() (v JudgeStatus) {
	return p.Status
}

func (p *JudgeResponse) GetOutput() (v string) {
	return p.Output
}

func (p *JudgeResponse) GetError() (v string) {
	return p.Error
}
func (p *JudgeResponse) SetTime(val int64) {
	p.Time = val
}
func (p *JudgeResponse) SetMemory(val int64) {
	p.Memory = val
}
func (p *JudgeResponse) SetStatus(val JudgeStatus) {
	p.Status = val
}
func (p *JudgeResponse) SetOutput(val string) {
	p.Output = val
}
func (p *JudgeResponse) SetError(val string) {
	p.Error = val
}

var fieldIDToName_JudgeResponse = map[int16]string{
	1: "time",
	2: "memory",
	3: "status",
	4: "output",
	5: "error",
}

func (p *JudgeResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_JudgeResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *JudgeResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Time = _field
	return nil
}
func (p *JudgeResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Memory = _field
	return nil
}
func (p *JudgeResponse) ReadField3(iprot thrift.TProtocol) error {

	var _field JudgeStatus
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = JudgeStatus(v)
	}
	p.Status = _field
	return nil
}
func (p *JudgeResponse) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Output = _field
	return nil
}
func (p *JudgeResponse) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Error = _field
	return nil
}

func (p *JudgeResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("JudgeResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *JudgeResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("time", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Time); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *JudgeResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("memory", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Memory); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *JudgeResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *JudgeResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("output", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Output); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *JudgeResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("error", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Error); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *JudgeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JudgeResponse(%+v)", *p)

}

func (p *JudgeResponse) DeepEqual(ano *JudgeResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Time) {
		return false
	}
	if !p.Field2DeepEqual(ano.Memory) {
		return false
	}
	if !p.Field3DeepEqual(ano.Status) {
		return false
	}
	if !p.Field4DeepEqual(ano.Output) {
		return false
	}
	if !p.Field5DeepEqual(ano.Error) {
		return false
	}
	return true
}

func (p *JudgeResponse) Field1DeepEqual(src int64) bool {

	if p.Time != src {
		return false
	}
	return true
}
func (p *JudgeResponse) Field2DeepEqual(src int64) bool {

	if p.Memory != src {
		return false
	}
	return true
}
func (p *JudgeResponse) Field3DeepEqual(src JudgeStatus) bool {

	if p.Status != src {
		return false
	}
	return true
}
func (p *JudgeResponse) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Output, src) != 0 {
		return false
	}
	return true
}
func (p *JudgeResponse) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Error, src) != 0 {
		return false
	}
	return true
}

type UploadCodeRequest struct {
	Code     []byte   `thrift:"code,1,required" frugal:"1,required,binary" json:"code"`
	Language Language `thrift:"language,2,required" frugal:"2,required,Language" json:"language"`
}

func NewUploadCodeRequest() *UploadCodeRequest {
	return &UploadCodeRequest{}
}

func (p *UploadCodeRequest) InitDefault() {
}

func (p *UploadCodeRequest) GetCode() (v []byte) {
	return p.Code
}

func (p *UploadCodeRequest) GetLanguage() (v Language) {
	return p.Language
}
func (p *UploadCodeRequest) SetCode(val []byte) {
	p.Code = val
}
func (p *UploadCodeRequest) SetLanguage(val Language) {
	p.Language = val
}

var fieldIDToName_UploadCodeRequest = map[int16]string{
	1: "code",
	2: "language",
}

func (p *UploadCodeRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCode bool = false
	var issetLanguage bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCode = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetLanguage = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCode {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetLanguage {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UploadCodeRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UploadCodeRequest[fieldId]))
}

func (p *UploadCodeRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Code = _field
	return nil
}
func (p *UploadCodeRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field Language
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = Language(v)
	}
	p.Language = _field
	return nil
}

func (p *UploadCodeRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UploadCodeRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UploadCodeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Code)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UploadCodeRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("language", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Language)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UploadCodeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadCodeRequest(%+v)", *p)

}

func (p *UploadCodeRequest) DeepEqual(ano *UploadCodeRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Language) {
		return false
	}
	return true
}

func (p *UploadCodeRequest) Field1DeepEqual(src []byte) bool {

	if bytes.Compare(p.Code, src) != 0 {
		return false
	}
	return true
}
func (p *UploadCodeRequest) Field2DeepEqual(src Language) bool {

	if p.Language != src {
		return false
	}
	return true
}

type UploadCodeResponse struct {
	FileId string `thrift:"fileId,1,required" frugal:"1,required,string" json:"fileId"`
}

func NewUploadCodeResponse() *UploadCodeResponse {
	return &UploadCodeResponse{}
}

func (p *UploadCodeResponse) InitDefault() {
}

func (p *UploadCodeResponse) GetFileId() (v string) {
	return p.FileId
}
func (p *UploadCodeResponse) SetFileId(val string) {
	p.FileId = val
}

var fieldIDToName_UploadCodeResponse = map[int16]string{
	1: "fileId",
}

func (p *UploadCodeResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFileId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFileId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFileId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UploadCodeResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UploadCodeResponse[fieldId]))
}

func (p *UploadCodeResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FileId = _field
	return nil
}

func (p *UploadCodeResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UploadCodeResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UploadCodeResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fileId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FileId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UploadCodeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadCodeResponse(%+v)", *p)

}

func (p *UploadCodeResponse) DeepEqual(ano *UploadCodeResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FileId) {
		return false
	}
	return true
}

func (p *UploadCodeResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.FileId, src) != 0 {
		return false
	}
	return true
}

type DeleteCodeRequest struct {
	FileId string `thrift:"fileId,1,required" frugal:"1,required,string" json:"fileId"`
}

func NewDeleteCodeRequest() *DeleteCodeRequest {
	return &DeleteCodeRequest{}
}

func (p *DeleteCodeRequest) InitDefault() {
}

func (p *DeleteCodeRequest) GetFileId() (v string) {
	return p.FileId
}
func (p *DeleteCodeRequest) SetFileId(val string) {
	p.FileId = val
}

var fieldIDToName_DeleteCodeRequest = map[int16]string{
	1: "fileId",
}

func (p *DeleteCodeRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFileId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFileId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFileId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteCodeRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DeleteCodeRequest[fieldId]))
}

func (p *DeleteCodeRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FileId = _field
	return nil
}

func (p *DeleteCodeRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCodeRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteCodeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fileId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FileId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteCodeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCodeRequest(%+v)", *p)

}

func (p *DeleteCodeRequest) DeepEqual(ano *DeleteCodeRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FileId) {
		return false
	}
	return true
}

func (p *DeleteCodeRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.FileId, src) != 0 {
		return false
	}
	return true
}

type DeleteCodeResponse struct {
}

func NewDeleteCodeResponse() *DeleteCodeResponse {
	return &DeleteCodeResponse{}
}

func (p *DeleteCodeResponse) InitDefault() {
}

var fieldIDToName_DeleteCodeResponse = map[int16]string{}

func (p *DeleteCodeResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteCodeResponse) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("DeleteCodeResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteCodeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCodeResponse(%+v)", *p)

}

func (p *DeleteCodeResponse) DeepEqual(ano *DeleteCodeResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type JudgeService interface {
	Judge(ctx context.Context, req *JudgeRequest) (r *JudgeResponse, err error)

	UploadCode(ctx context.Context, req *UploadCodeRequest) (r *UploadCodeResponse, err error)

	DeleteCode(ctx context.Context, req *DeleteCodeRequest) (r *DeleteCodeResponse, err error)
}

type JudgeServiceClient struct {
	c thrift.TClient
}

func NewJudgeServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *JudgeServiceClient {
	return &JudgeServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewJudgeServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *JudgeServiceClient {
	return &JudgeServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewJudgeServiceClient(c thrift.TClient) *JudgeServiceClient {
	return &JudgeServiceClient{
		c: c,
	}
}

func (p *JudgeServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *JudgeServiceClient) Judge(ctx context.Context, req *JudgeRequest) (r *JudgeResponse, err error) {
	var _args JudgeServiceJudgeArgs
	_args.Req = req
	var _result JudgeServiceJudgeResult
	if err = p.Client_().Call(ctx, "Judge", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *JudgeServiceClient) UploadCode(ctx context.Context, req *UploadCodeRequest) (r *UploadCodeResponse, err error) {
	var _args JudgeServiceUploadCodeArgs
	_args.Req = req
	var _result JudgeServiceUploadCodeResult
	if err = p.Client_().Call(ctx, "UploadCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *JudgeServiceClient) DeleteCode(ctx context.Context, req *DeleteCodeRequest) (r *DeleteCodeResponse, err error) {
	var _args JudgeServiceDeleteCodeArgs
	_args.Req = req
	var _result JudgeServiceDeleteCodeResult
	if err = p.Client_().Call(ctx, "DeleteCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type JudgeServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      JudgeService
}

func (p *JudgeServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *JudgeServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *JudgeServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewJudgeServiceProcessor(handler JudgeService) *JudgeServiceProcessor {
	self := &JudgeServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("Judge", &judgeServiceProcessorJudge{handler: handler})
	self.AddToProcessorMap("UploadCode", &judgeServiceProcessorUploadCode{handler: handler})
	self.AddToProcessorMap("DeleteCode", &judgeServiceProcessorDeleteCode{handler: handler})
	return self
}
func (p *JudgeServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type judgeServiceProcessorJudge struct {
	handler JudgeService
}

func (p *judgeServiceProcessorJudge) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := JudgeServiceJudgeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Judge", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := JudgeServiceJudgeResult{}
	var retval *JudgeResponse
	if retval, err2 = p.handler.Judge(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Judge: "+err2.Error())
		oprot.WriteMessageBegin("Judge", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Judge", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type judgeServiceProcessorUploadCode struct {
	handler JudgeService
}

func (p *judgeServiceProcessorUploadCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := JudgeServiceUploadCodeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UploadCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := JudgeServiceUploadCodeResult{}
	var retval *UploadCodeResponse
	if retval, err2 = p.handler.UploadCode(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UploadCode: "+err2.Error())
		oprot.WriteMessageBegin("UploadCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UploadCode", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type judgeServiceProcessorDeleteCode struct {
	handler JudgeService
}

func (p *judgeServiceProcessorDeleteCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := JudgeServiceDeleteCodeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := JudgeServiceDeleteCodeResult{}
	var retval *DeleteCodeResponse
	if retval, err2 = p.handler.DeleteCode(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteCode: "+err2.Error())
		oprot.WriteMessageBegin("DeleteCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteCode", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type JudgeServiceJudgeArgs struct {
	Req *JudgeRequest `thrift:"req,1" frugal:"1,default,JudgeRequest" json:"req"`
}

func NewJudgeServiceJudgeArgs() *JudgeServiceJudgeArgs {
	return &JudgeServiceJudgeArgs{}
}

func (p *JudgeServiceJudgeArgs) InitDefault() {
}

var JudgeServiceJudgeArgs_Req_DEFAULT *JudgeRequest

func (p *JudgeServiceJudgeArgs) GetReq() (v *JudgeRequest) {
	if !p.IsSetReq() {
		return JudgeServiceJudgeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *JudgeServiceJudgeArgs) SetReq(val *JudgeRequest) {
	p.Req = val
}

var fieldIDToName_JudgeServiceJudgeArgs = map[int16]string{
	1: "req",
}

func (p *JudgeServiceJudgeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *JudgeServiceJudgeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_JudgeServiceJudgeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *JudgeServiceJudgeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewJudgeRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *JudgeServiceJudgeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Judge_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *JudgeServiceJudgeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *JudgeServiceJudgeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JudgeServiceJudgeArgs(%+v)", *p)

}

func (p *JudgeServiceJudgeArgs) DeepEqual(ano *JudgeServiceJudgeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *JudgeServiceJudgeArgs) Field1DeepEqual(src *JudgeRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type JudgeServiceJudgeResult struct {
	Success *JudgeResponse `thrift:"success,0,optional" frugal:"0,optional,JudgeResponse" json:"success,omitempty"`
}

func NewJudgeServiceJudgeResult() *JudgeServiceJudgeResult {
	return &JudgeServiceJudgeResult{}
}

func (p *JudgeServiceJudgeResult) InitDefault() {
}

var JudgeServiceJudgeResult_Success_DEFAULT *JudgeResponse

func (p *JudgeServiceJudgeResult) GetSuccess() (v *JudgeResponse) {
	if !p.IsSetSuccess() {
		return JudgeServiceJudgeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *JudgeServiceJudgeResult) SetSuccess(x interface{}) {
	p.Success = x.(*JudgeResponse)
}

var fieldIDToName_JudgeServiceJudgeResult = map[int16]string{
	0: "success",
}

func (p *JudgeServiceJudgeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *JudgeServiceJudgeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_JudgeServiceJudgeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *JudgeServiceJudgeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewJudgeResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *JudgeServiceJudgeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Judge_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *JudgeServiceJudgeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *JudgeServiceJudgeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JudgeServiceJudgeResult(%+v)", *p)

}

func (p *JudgeServiceJudgeResult) DeepEqual(ano *JudgeServiceJudgeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *JudgeServiceJudgeResult) Field0DeepEqual(src *JudgeResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type JudgeServiceUploadCodeArgs struct {
	Req *UploadCodeRequest `thrift:"req,1" frugal:"1,default,UploadCodeRequest" json:"req"`
}

func NewJudgeServiceUploadCodeArgs() *JudgeServiceUploadCodeArgs {
	return &JudgeServiceUploadCodeArgs{}
}

func (p *JudgeServiceUploadCodeArgs) InitDefault() {
}

var JudgeServiceUploadCodeArgs_Req_DEFAULT *UploadCodeRequest

func (p *JudgeServiceUploadCodeArgs) GetReq() (v *UploadCodeRequest) {
	if !p.IsSetReq() {
		return JudgeServiceUploadCodeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *JudgeServiceUploadCodeArgs) SetReq(val *UploadCodeRequest) {
	p.Req = val
}

var fieldIDToName_JudgeServiceUploadCodeArgs = map[int16]string{
	1: "req",
}

func (p *JudgeServiceUploadCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *JudgeServiceUploadCodeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_JudgeServiceUploadCodeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *JudgeServiceUploadCodeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUploadCodeRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *JudgeServiceUploadCodeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UploadCode_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *JudgeServiceUploadCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *JudgeServiceUploadCodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JudgeServiceUploadCodeArgs(%+v)", *p)

}

func (p *JudgeServiceUploadCodeArgs) DeepEqual(ano *JudgeServiceUploadCodeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *JudgeServiceUploadCodeArgs) Field1DeepEqual(src *UploadCodeRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type JudgeServiceUploadCodeResult struct {
	Success *UploadCodeResponse `thrift:"success,0,optional" frugal:"0,optional,UploadCodeResponse" json:"success,omitempty"`
}

func NewJudgeServiceUploadCodeResult() *JudgeServiceUploadCodeResult {
	return &JudgeServiceUploadCodeResult{}
}

func (p *JudgeServiceUploadCodeResult) InitDefault() {
}

var JudgeServiceUploadCodeResult_Success_DEFAULT *UploadCodeResponse

func (p *JudgeServiceUploadCodeResult) GetSuccess() (v *UploadCodeResponse) {
	if !p.IsSetSuccess() {
		return JudgeServiceUploadCodeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *JudgeServiceUploadCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*UploadCodeResponse)
}

var fieldIDToName_JudgeServiceUploadCodeResult = map[int16]string{
	0: "success",
}

func (p *JudgeServiceUploadCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *JudgeServiceUploadCodeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_JudgeServiceUploadCodeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *JudgeServiceUploadCodeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUploadCodeResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *JudgeServiceUploadCodeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UploadCode_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *JudgeServiceUploadCodeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *JudgeServiceUploadCodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JudgeServiceUploadCodeResult(%+v)", *p)

}

func (p *JudgeServiceUploadCodeResult) DeepEqual(ano *JudgeServiceUploadCodeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *JudgeServiceUploadCodeResult) Field0DeepEqual(src *UploadCodeResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type JudgeServiceDeleteCodeArgs struct {
	Req *DeleteCodeRequest `thrift:"req,1" frugal:"1,default,DeleteCodeRequest" json:"req"`
}

func NewJudgeServiceDeleteCodeArgs() *JudgeServiceDeleteCodeArgs {
	return &JudgeServiceDeleteCodeArgs{}
}

func (p *JudgeServiceDeleteCodeArgs) InitDefault() {
}

var JudgeServiceDeleteCodeArgs_Req_DEFAULT *DeleteCodeRequest

func (p *JudgeServiceDeleteCodeArgs) GetReq() (v *DeleteCodeRequest) {
	if !p.IsSetReq() {
		return JudgeServiceDeleteCodeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *JudgeServiceDeleteCodeArgs) SetReq(val *DeleteCodeRequest) {
	p.Req = val
}

var fieldIDToName_JudgeServiceDeleteCodeArgs = map[int16]string{
	1: "req",
}

func (p *JudgeServiceDeleteCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *JudgeServiceDeleteCodeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_JudgeServiceDeleteCodeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *JudgeServiceDeleteCodeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteCodeRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *JudgeServiceDeleteCodeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCode_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *JudgeServiceDeleteCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *JudgeServiceDeleteCodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JudgeServiceDeleteCodeArgs(%+v)", *p)

}

func (p *JudgeServiceDeleteCodeArgs) DeepEqual(ano *JudgeServiceDeleteCodeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *JudgeServiceDeleteCodeArgs) Field1DeepEqual(src *DeleteCodeRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type JudgeServiceDeleteCodeResult struct {
	Success *DeleteCodeResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteCodeResponse" json:"success,omitempty"`
}

func NewJudgeServiceDeleteCodeResult() *JudgeServiceDeleteCodeResult {
	return &JudgeServiceDeleteCodeResult{}
}

func (p *JudgeServiceDeleteCodeResult) InitDefault() {
}

var JudgeServiceDeleteCodeResult_Success_DEFAULT *DeleteCodeResponse

func (p *JudgeServiceDeleteCodeResult) GetSuccess() (v *DeleteCodeResponse) {
	if !p.IsSetSuccess() {
		return JudgeServiceDeleteCodeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *JudgeServiceDeleteCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteCodeResponse)
}

var fieldIDToName_JudgeServiceDeleteCodeResult = map[int16]string{
	0: "success",
}

func (p *JudgeServiceDeleteCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *JudgeServiceDeleteCodeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_JudgeServiceDeleteCodeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *JudgeServiceDeleteCodeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteCodeResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *JudgeServiceDeleteCodeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCode_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *JudgeServiceDeleteCodeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *JudgeServiceDeleteCodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JudgeServiceDeleteCodeResult(%+v)", *p)

}

func (p *JudgeServiceDeleteCodeResult) DeepEqual(ano *JudgeServiceDeleteCodeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *JudgeServiceDeleteCodeResult) Field0DeepEqual(src *DeleteCodeResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
