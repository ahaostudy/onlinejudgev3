// Code generated by Kitex v0.9.1. DO NOT EDIT.

package judgeservice

import (
	"context"
	"errors"
	base "github.com/ahaostudy/onlinejudge/kitex_gen/base"
	judgesvc "github.com/ahaostudy/onlinejudge/kitex_gen/judgesvc"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Judge": kitex.NewMethodInfo(
		judgeHandler,
		newJudgeServiceJudgeArgs,
		newJudgeServiceJudgeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UploadCode": kitex.NewMethodInfo(
		uploadCodeHandler,
		newJudgeServiceUploadCodeArgs,
		newJudgeServiceUploadCodeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteCode": kitex.NewMethodInfo(
		deleteCodeHandler,
		newJudgeServiceDeleteCodeArgs,
		newJudgeServiceDeleteCodeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	judgeServiceServiceInfo                = NewServiceInfo()
	judgeServiceServiceInfoForClient       = NewServiceInfoForClient()
	judgeServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return judgeServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return judgeServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return judgeServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "JudgeService"
	handlerType := (*judgesvc.JudgeService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "judgesvc",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func judgeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*judgesvc.JudgeServiceJudgeArgs)
	realResult := result.(*judgesvc.JudgeServiceJudgeResult)
	success, err := handler.(judgesvc.JudgeService).Judge(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newJudgeServiceJudgeArgs() interface{} {
	return judgesvc.NewJudgeServiceJudgeArgs()
}

func newJudgeServiceJudgeResult() interface{} {
	return judgesvc.NewJudgeServiceJudgeResult()
}

func uploadCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*judgesvc.JudgeServiceUploadCodeArgs)
	realResult := result.(*judgesvc.JudgeServiceUploadCodeResult)
	success, err := handler.(judgesvc.JudgeService).UploadCode(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newJudgeServiceUploadCodeArgs() interface{} {
	return judgesvc.NewJudgeServiceUploadCodeArgs()
}

func newJudgeServiceUploadCodeResult() interface{} {
	return judgesvc.NewJudgeServiceUploadCodeResult()
}

func deleteCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*judgesvc.JudgeServiceDeleteCodeArgs)
	realResult := result.(*judgesvc.JudgeServiceDeleteCodeResult)
	success, err := handler.(judgesvc.JudgeService).DeleteCode(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newJudgeServiceDeleteCodeArgs() interface{} {
	return judgesvc.NewJudgeServiceDeleteCodeArgs()
}

func newJudgeServiceDeleteCodeResult() interface{} {
	return judgesvc.NewJudgeServiceDeleteCodeResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Judge(ctx context.Context, req *judgesvc.JudgeRequest) (r *judgesvc.JudgeResponse, err error) {
	var _args judgesvc.JudgeServiceJudgeArgs
	_args.Req = req
	var _result judgesvc.JudgeServiceJudgeResult
	if err = p.c.Call(ctx, "Judge", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UploadCode(ctx context.Context, req *judgesvc.UploadCodeRequest) (r *judgesvc.UploadCodeResponse, err error) {
	var _args judgesvc.JudgeServiceUploadCodeArgs
	_args.Req = req
	var _result judgesvc.JudgeServiceUploadCodeResult
	if err = p.c.Call(ctx, "UploadCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCode(ctx context.Context, req *judgesvc.DeleteCodeRequest) (r *base.Empty, err error) {
	var _args judgesvc.JudgeServiceDeleteCodeArgs
	_args.Req = req
	var _result judgesvc.JudgeServiceDeleteCodeResult
	if err = p.c.Call(ctx, "DeleteCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
