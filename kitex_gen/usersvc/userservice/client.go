// Code generated by Kitex v0.9.1. DO NOT EDIT.

package userservice

import (
	"context"

	base "github.com/ahaostudy/onlinejudge/kitex_gen/base"
	usersvc "github.com/ahaostudy/onlinejudge/kitex_gen/usersvc"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Register(ctx context.Context, req *usersvc.RegisterReq, callOptions ...callopt.Option) (r *usersvc.RegisterResp, err error)
	Login(ctx context.Context, req *usersvc.LoginReq, callOptions ...callopt.Option) (r *usersvc.LoginResp, err error)
	CreateUser(ctx context.Context, req *usersvc.CreateUserReq, callOptions ...callopt.Option) (r *usersvc.CreateUserResp, err error)
	UpdateUser(ctx context.Context, req *usersvc.UpdateUserReq, callOptions ...callopt.Option) (r *base.Empty, err error)
	GenCaptcha(ctx context.Context, req *usersvc.GenCaptchaReq, callOptions ...callopt.Option) (r *usersvc.GenCaptchaResp, err error)
	GetUser(ctx context.Context, req *usersvc.GetUserReq, callOptions ...callopt.Option) (r *usersvc.GetUserResp, err error)
	GetUserList(ctx context.Context, req *usersvc.GetUserListReq, callOptions ...callopt.Option) (r *usersvc.GetUserListResp, err error)
	UploadAvatar(ctx context.Context, req *usersvc.UploadAvatarReq, callOptions ...callopt.Option) (r *usersvc.UploadAvatarResp, err error)
	DownloadAvatar(ctx context.Context, req *usersvc.DownloadAvatarReq, callOptions ...callopt.Option) (r *usersvc.DownloadAvatarResp, err error)
	DeleteAvatar(ctx context.Context, req *usersvc.DeleteAvatarReq, callOptions ...callopt.Option) (r *base.Empty, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserServiceClient struct {
	*kClient
}

func (p *kUserServiceClient) Register(ctx context.Context, req *usersvc.RegisterReq, callOptions ...callopt.Option) (r *usersvc.RegisterResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Register(ctx, req)
}

func (p *kUserServiceClient) Login(ctx context.Context, req *usersvc.LoginReq, callOptions ...callopt.Option) (r *usersvc.LoginResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Login(ctx, req)
}

func (p *kUserServiceClient) CreateUser(ctx context.Context, req *usersvc.CreateUserReq, callOptions ...callopt.Option) (r *usersvc.CreateUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateUser(ctx, req)
}

func (p *kUserServiceClient) UpdateUser(ctx context.Context, req *usersvc.UpdateUserReq, callOptions ...callopt.Option) (r *base.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateUser(ctx, req)
}

func (p *kUserServiceClient) GenCaptcha(ctx context.Context, req *usersvc.GenCaptchaReq, callOptions ...callopt.Option) (r *usersvc.GenCaptchaResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GenCaptcha(ctx, req)
}

func (p *kUserServiceClient) GetUser(ctx context.Context, req *usersvc.GetUserReq, callOptions ...callopt.Option) (r *usersvc.GetUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUser(ctx, req)
}

func (p *kUserServiceClient) GetUserList(ctx context.Context, req *usersvc.GetUserListReq, callOptions ...callopt.Option) (r *usersvc.GetUserListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserList(ctx, req)
}

func (p *kUserServiceClient) UploadAvatar(ctx context.Context, req *usersvc.UploadAvatarReq, callOptions ...callopt.Option) (r *usersvc.UploadAvatarResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UploadAvatar(ctx, req)
}

func (p *kUserServiceClient) DownloadAvatar(ctx context.Context, req *usersvc.DownloadAvatarReq, callOptions ...callopt.Option) (r *usersvc.DownloadAvatarResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DownloadAvatar(ctx, req)
}

func (p *kUserServiceClient) DeleteAvatar(ctx context.Context, req *usersvc.DeleteAvatarReq, callOptions ...callopt.Option) (r *base.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteAvatar(ctx, req)
}
